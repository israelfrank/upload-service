// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upload_service.proto

package uploadservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// File is a parsed multipart form.
type File struct {
	Value                map[string]*FileStringArray     `protobuf:"bytes,1,rep,name=Value,proto3" json:"Value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	File                 map[string]*FileFileHeaderArray `protobuf:"bytes,2,rep,name=File,proto3" json:"File,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *File) Reset()         { *m = File{} }
func (m *File) String() string { return proto.CompactTextString(m) }
func (*File) ProtoMessage()    {}
func (*File) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_7afa2a5e65858a7f, []int{0}
}
func (m *File) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_File.Unmarshal(m, b)
}
func (m *File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_File.Marshal(b, m, deterministic)
}
func (dst *File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_File.Merge(dst, src)
}
func (m *File) XXX_Size() int {
	return xxx_messageInfo_File.Size(m)
}
func (m *File) XXX_DiscardUnknown() {
	xxx_messageInfo_File.DiscardUnknown(m)
}

var xxx_messageInfo_File proto.InternalMessageInfo

func (m *File) GetValue() map[string]*FileStringArray {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *File) GetFile() map[string]*FileFileHeaderArray {
	if m != nil {
		return m.File
	}
	return nil
}

// This a strings array.
type FileStringArray struct {
	Val                  []string `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileStringArray) Reset()         { *m = FileStringArray{} }
func (m *FileStringArray) String() string { return proto.CompactTextString(m) }
func (*FileStringArray) ProtoMessage()    {}
func (*FileStringArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_7afa2a5e65858a7f, []int{0, 0}
}
func (m *FileStringArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileStringArray.Unmarshal(m, b)
}
func (m *FileStringArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileStringArray.Marshal(b, m, deterministic)
}
func (dst *FileStringArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileStringArray.Merge(dst, src)
}
func (m *FileStringArray) XXX_Size() int {
	return xxx_messageInfo_FileStringArray.Size(m)
}
func (m *FileStringArray) XXX_DiscardUnknown() {
	xxx_messageInfo_FileStringArray.DiscardUnknown(m)
}

var xxx_messageInfo_FileStringArray proto.InternalMessageInfo

func (m *FileStringArray) GetVal() []string {
	if m != nil {
		return m.Val
	}
	return nil
}

// This represents fileheader type of the mime/multipart package.
type FileFileHeader struct {
	FileName             string                      `protobuf:"bytes,1,opt,name=FileName,proto3" json:"FileName,omitempty"`
	Header               map[string]*FileStringArray `protobuf:"bytes,2,rep,name=Header,proto3" json:"Header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Size                 int64                       `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *FileFileHeader) Reset()         { *m = FileFileHeader{} }
func (m *FileFileHeader) String() string { return proto.CompactTextString(m) }
func (*FileFileHeader) ProtoMessage()    {}
func (*FileFileHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_7afa2a5e65858a7f, []int{0, 1}
}
func (m *FileFileHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileFileHeader.Unmarshal(m, b)
}
func (m *FileFileHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileFileHeader.Marshal(b, m, deterministic)
}
func (dst *FileFileHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileFileHeader.Merge(dst, src)
}
func (m *FileFileHeader) XXX_Size() int {
	return xxx_messageInfo_FileFileHeader.Size(m)
}
func (m *FileFileHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_FileFileHeader.DiscardUnknown(m)
}

var xxx_messageInfo_FileFileHeader proto.InternalMessageInfo

func (m *FileFileHeader) GetFileName() string {
	if m != nil {
		return m.FileName
	}
	return ""
}

func (m *FileFileHeader) GetHeader() map[string]*FileStringArray {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *FileFileHeader) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

// This is an array of fileHeaders.
type FileFileHeaderArray struct {
	Val                  []*FileFileHeader `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FileFileHeaderArray) Reset()         { *m = FileFileHeaderArray{} }
func (m *FileFileHeaderArray) String() string { return proto.CompactTextString(m) }
func (*FileFileHeaderArray) ProtoMessage()    {}
func (*FileFileHeaderArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_7afa2a5e65858a7f, []int{0, 2}
}
func (m *FileFileHeaderArray) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileFileHeaderArray.Unmarshal(m, b)
}
func (m *FileFileHeaderArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileFileHeaderArray.Marshal(b, m, deterministic)
}
func (dst *FileFileHeaderArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileFileHeaderArray.Merge(dst, src)
}
func (m *FileFileHeaderArray) XXX_Size() int {
	return xxx_messageInfo_FileFileHeaderArray.Size(m)
}
func (m *FileFileHeaderArray) XXX_DiscardUnknown() {
	xxx_messageInfo_FileFileHeaderArray.DiscardUnknown(m)
}

var xxx_messageInfo_FileFileHeaderArray proto.InternalMessageInfo

func (m *FileFileHeaderArray) GetVal() []*FileFileHeader {
	if m != nil {
		return m.Val
	}
	return nil
}

// UploadRequest is the request for Upload.
type UploadRequest struct {
	// file is the file to upload.
	File *File `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// The bucket we want to upload the file to.
	Bucket               string   `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadRequest) Reset()         { *m = UploadRequest{} }
func (m *UploadRequest) String() string { return proto.CompactTextString(m) }
func (*UploadRequest) ProtoMessage()    {}
func (*UploadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_7afa2a5e65858a7f, []int{1}
}
func (m *UploadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadRequest.Unmarshal(m, b)
}
func (m *UploadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadRequest.Marshal(b, m, deterministic)
}
func (dst *UploadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadRequest.Merge(dst, src)
}
func (m *UploadRequest) XXX_Size() int {
	return xxx_messageInfo_UploadRequest.Size(m)
}
func (m *UploadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadRequest proto.InternalMessageInfo

func (m *UploadRequest) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *UploadRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

// UploadResponse is the response for Upload.
type UploadResponse struct {
	// The location that the file uploaded to.
	Output               []byte   `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadResponse) Reset()         { *m = UploadResponse{} }
func (m *UploadResponse) String() string { return proto.CompactTextString(m) }
func (*UploadResponse) ProtoMessage()    {}
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_7afa2a5e65858a7f, []int{2}
}
func (m *UploadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadResponse.Unmarshal(m, b)
}
func (m *UploadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadResponse.Marshal(b, m, deterministic)
}
func (dst *UploadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadResponse.Merge(dst, src)
}
func (m *UploadResponse) XXX_Size() int {
	return xxx_messageInfo_UploadResponse.Size(m)
}
func (m *UploadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadResponse proto.InternalMessageInfo

func (m *UploadResponse) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterType((*File)(nil), "uploadservice.File")
	proto.RegisterMapType((map[string]*FileFileHeaderArray)(nil), "uploadservice.File.FileEntry")
	proto.RegisterMapType((map[string]*FileStringArray)(nil), "uploadservice.File.ValueEntry")
	proto.RegisterType((*FileStringArray)(nil), "uploadservice.File.stringArray")
	proto.RegisterType((*FileFileHeader)(nil), "uploadservice.File.fileHeader")
	proto.RegisterMapType((map[string]*FileStringArray)(nil), "uploadservice.File.fileHeader.HeaderEntry")
	proto.RegisterType((*FileFileHeaderArray)(nil), "uploadservice.File.fileHeaderArray")
	proto.RegisterType((*UploadRequest)(nil), "uploadservice.UploadRequest")
	proto.RegisterType((*UploadResponse)(nil), "uploadservice.UploadResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UploadServiceClient is the client API for UploadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UploadServiceClient interface {
	// The function Uploads the given file.
	//
	// Returns the Location of the file as output.
	//
	// In case of an error the error is returned.
	UploadFile(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error)
}

type uploadServiceClient struct {
	cc *grpc.ClientConn
}

func NewUploadServiceClient(cc *grpc.ClientConn) UploadServiceClient {
	return &uploadServiceClient{cc}
}

func (c *uploadServiceClient) UploadFile(ctx context.Context, in *UploadRequest, opts ...grpc.CallOption) (*UploadResponse, error) {
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, "/uploadservice.UploadService/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadServiceServer is the server API for UploadService service.
type UploadServiceServer interface {
	// The function Uploads the given file.
	//
	// Returns the Location of the file as output.
	//
	// In case of an error the error is returned.
	UploadFile(context.Context, *UploadRequest) (*UploadResponse, error)
}

func RegisterUploadServiceServer(s *grpc.Server, srv UploadServiceServer) {
	s.RegisterService(&_UploadService_serviceDesc, srv)
}

func _UploadService_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServiceServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uploadservice.UploadService/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServiceServer).UploadFile(ctx, req.(*UploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UploadService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "uploadservice.UploadService",
	HandlerType: (*UploadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _UploadService_UploadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upload_service.proto",
}

func init() {
	proto.RegisterFile("upload_service.proto", fileDescriptor_upload_service_7afa2a5e65858a7f)
}

var fileDescriptor_upload_service_7afa2a5e65858a7f = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x53, 0x5f, 0x4b, 0xe3, 0x40,
	0x10, 0xbf, 0x34, 0x69, 0xb9, 0x4e, 0xae, 0x77, 0xc7, 0x2a, 0x52, 0x82, 0xb5, 0x12, 0x1f, 0x2c,
	0x3e, 0x04, 0x8d, 0x0a, 0xea, 0x9b, 0x8a, 0x22, 0x08, 0x22, 0x5b, 0x14, 0x94, 0x82, 0xa4, 0xed,
	0x2a, 0xa1, 0xb1, 0x89, 0x9b, 0x4d, 0xa1, 0x7e, 0x56, 0xbf, 0x82, 0xdf, 0xc1, 0xec, 0x6c, 0xda,
	0xb4, 0x25, 0xf5, 0xc9, 0x97, 0x64, 0x66, 0xf2, 0xfb, 0x97, 0x59, 0x16, 0x56, 0x93, 0x28, 0x08,
	0xbd, 0xfe, 0x53, 0xcc, 0xf8, 0xc8, 0xef, 0x31, 0x27, 0xe2, 0xa1, 0x08, 0x49, 0x4d, 0x4d, 0xb3,
	0xa1, 0xfd, 0x69, 0x80, 0x71, 0xe9, 0x07, 0x8c, 0x1c, 0x40, 0xf9, 0xde, 0x0b, 0x12, 0x56, 0xd7,
	0x36, 0xf5, 0x96, 0xe9, 0x6e, 0x38, 0x73, 0x38, 0x47, 0x62, 0x1c, 0x04, 0x5c, 0x0c, 0x05, 0x1f,
	0x53, 0x05, 0x26, 0x7b, 0x8a, 0x5d, 0x2f, 0x21, 0xa9, 0x51, 0x44, 0x92, 0x0f, 0xc5, 0x41, 0xa8,
	0xd5, 0x04, 0x33, 0x16, 0xdc, 0x1f, 0xbe, 0x9c, 0x72, 0xee, 0x8d, 0xc9, 0x7f, 0xd0, 0x47, 0x5e,
	0x80, 0xae, 0x55, 0x2a, 0x4b, 0xeb, 0x43, 0x03, 0x78, 0x4e, 0x91, 0x57, 0xcc, 0xeb, 0x33, 0x4e,
	0x2c, 0xf8, 0x2d, 0x79, 0x37, 0xde, 0xab, 0xcc, 0xa6, 0xa5, 0xa8, 0x69, 0x4f, 0xce, 0xa0, 0xa2,
	0x50, 0x59, 0x80, 0x9d, 0xa2, 0x00, 0xb9, 0x96, 0xa3, 0x5e, 0x2a, 0x4d, 0xc6, 0x24, 0x04, 0x8c,
	0xb6, 0xff, 0xce, 0xea, 0x7a, 0xaa, 0xad, 0x53, 0xac, 0xad, 0x47, 0x30, 0x67, 0xa0, 0x32, 0xe3,
	0x80, 0x8d, 0x33, 0x77, 0x59, 0x92, 0x43, 0x28, 0x8f, 0x70, 0x5b, 0xa5, 0x74, 0x66, 0xba, 0xcd,
	0x22, 0xdf, 0x99, 0xbf, 0xa4, 0x0a, 0x7d, 0x52, 0x3a, 0xd2, 0xac, 0x73, 0xf8, 0x97, 0x27, 0x52,
	0x3b, 0xd8, 0xcd, 0x77, 0xb0, 0x64, 0xf3, 0x39, 0x43, 0xed, 0xe8, 0x01, 0x20, 0x3f, 0x8c, 0x9f,
	0xcd, 0xd7, 0x81, 0xea, 0xf4, 0xc8, 0x0a, 0x94, 0x8f, 0xe7, 0x95, 0xb7, 0xbe, 0x4f, 0xbb, 0xa8,
	0x6e, 0xdf, 0x42, 0xed, 0x0e, 0x09, 0x94, 0xbd, 0x25, 0x2c, 0x16, 0x64, 0x1b, 0x0c, 0x09, 0x47,
	0x0b, 0xd3, 0x5d, 0x29, 0x90, 0xa3, 0x08, 0x20, 0x6b, 0x50, 0xe9, 0x26, 0xbd, 0x01, 0x13, 0xe8,
	0x5c, 0xa5, 0x59, 0x67, 0xb7, 0xe0, 0xef, 0x44, 0x31, 0x8e, 0xc2, 0x61, 0x8c, 0xc8, 0x30, 0x11,
	0x51, 0x22, 0x50, 0xf4, 0x0f, 0xcd, 0x3a, 0xb7, 0x33, 0xf1, 0x6e, 0x2b, 0x75, 0x72, 0x0d, 0xa0,
	0x06, 0x78, 0x03, 0xd6, 0x17, 0xbc, 0xe7, 0x72, 0x5a, 0x8d, 0x25, 0x5f, 0x95, 0xa7, 0xfd, 0xab,
	0x5b, 0xc1, 0xfb, 0xb5, 0xff, 0x15, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x3e, 0xd7, 0xe5, 0x77, 0x03,
	0x00, 0x00,
}
