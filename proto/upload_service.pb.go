// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upload_service.proto

package upload

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// UploadMediaRequest is the request for Media Upload.
type UploadMediaRequest struct {
	// File is the file to upload.
	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// File key to store in S3.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The bucket to upload the file to.
	Bucket               string   `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadMediaRequest) Reset()         { *m = UploadMediaRequest{} }
func (m *UploadMediaRequest) String() string { return proto.CompactTextString(m) }
func (*UploadMediaRequest) ProtoMessage()    {}
func (*UploadMediaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_8d455835afb607d8, []int{0}
}
func (m *UploadMediaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadMediaRequest.Unmarshal(m, b)
}
func (m *UploadMediaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadMediaRequest.Marshal(b, m, deterministic)
}
func (dst *UploadMediaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadMediaRequest.Merge(dst, src)
}
func (m *UploadMediaRequest) XXX_Size() int {
	return xxx_messageInfo_UploadMediaRequest.Size(m)
}
func (m *UploadMediaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadMediaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadMediaRequest proto.InternalMessageInfo

func (m *UploadMediaRequest) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *UploadMediaRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UploadMediaRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

// UploadMediaResponse is the response for Media Upload.
type UploadMediaResponse struct {
	// The location that the file was uploaded to.
	Output               string   `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadMediaResponse) Reset()         { *m = UploadMediaResponse{} }
func (m *UploadMediaResponse) String() string { return proto.CompactTextString(m) }
func (*UploadMediaResponse) ProtoMessage()    {}
func (*UploadMediaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_8d455835afb607d8, []int{1}
}
func (m *UploadMediaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadMediaResponse.Unmarshal(m, b)
}
func (m *UploadMediaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadMediaResponse.Marshal(b, m, deterministic)
}
func (dst *UploadMediaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadMediaResponse.Merge(dst, src)
}
func (m *UploadMediaResponse) XXX_Size() int {
	return xxx_messageInfo_UploadMediaResponse.Size(m)
}
func (m *UploadMediaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadMediaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadMediaResponse proto.InternalMessageInfo

func (m *UploadMediaResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

// UploadMultipartRequest is the request for Multipart Upload.
type UploadMultipartRequest struct {
	// File to upload.
	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// File metadata.
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// File key to store in S3.
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// The bucket to upload the file to.
	Bucket               string   `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadMultipartRequest) Reset()         { *m = UploadMultipartRequest{} }
func (m *UploadMultipartRequest) String() string { return proto.CompactTextString(m) }
func (*UploadMultipartRequest) ProtoMessage()    {}
func (*UploadMultipartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_8d455835afb607d8, []int{2}
}
func (m *UploadMultipartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadMultipartRequest.Unmarshal(m, b)
}
func (m *UploadMultipartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadMultipartRequest.Marshal(b, m, deterministic)
}
func (dst *UploadMultipartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadMultipartRequest.Merge(dst, src)
}
func (m *UploadMultipartRequest) XXX_Size() int {
	return xxx_messageInfo_UploadMultipartRequest.Size(m)
}
func (m *UploadMultipartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadMultipartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadMultipartRequest proto.InternalMessageInfo

func (m *UploadMultipartRequest) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *UploadMultipartRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *UploadMultipartRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UploadMultipartRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

// UploadMultipartResponse is the response for Multipart Upload.
type UploadMultipartResponse struct {
	// The location that the file was uploaded to.
	Output               string   `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadMultipartResponse) Reset()         { *m = UploadMultipartResponse{} }
func (m *UploadMultipartResponse) String() string { return proto.CompactTextString(m) }
func (*UploadMultipartResponse) ProtoMessage()    {}
func (*UploadMultipartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_8d455835afb607d8, []int{3}
}
func (m *UploadMultipartResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadMultipartResponse.Unmarshal(m, b)
}
func (m *UploadMultipartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadMultipartResponse.Marshal(b, m, deterministic)
}
func (dst *UploadMultipartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadMultipartResponse.Merge(dst, src)
}
func (m *UploadMultipartResponse) XXX_Size() int {
	return xxx_messageInfo_UploadMultipartResponse.Size(m)
}
func (m *UploadMultipartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadMultipartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadMultipartResponse proto.InternalMessageInfo

func (m *UploadMultipartResponse) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

// UploadResumableInitRequest is the request for Initiating Resumable Upload.
type UploadResumableInitRequest struct {
	// File key to store in S3.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The bucket to upload the file to.
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// File metadata.
	Metadata             map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UploadResumableInitRequest) Reset()         { *m = UploadResumableInitRequest{} }
func (m *UploadResumableInitRequest) String() string { return proto.CompactTextString(m) }
func (*UploadResumableInitRequest) ProtoMessage()    {}
func (*UploadResumableInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_8d455835afb607d8, []int{4}
}
func (m *UploadResumableInitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadResumableInitRequest.Unmarshal(m, b)
}
func (m *UploadResumableInitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadResumableInitRequest.Marshal(b, m, deterministic)
}
func (dst *UploadResumableInitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadResumableInitRequest.Merge(dst, src)
}
func (m *UploadResumableInitRequest) XXX_Size() int {
	return xxx_messageInfo_UploadResumableInitRequest.Size(m)
}
func (m *UploadResumableInitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadResumableInitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadResumableInitRequest proto.InternalMessageInfo

func (m *UploadResumableInitRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UploadResumableInitRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *UploadResumableInitRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// UploadResumableInitResponse is the response for Initiating Resumable Upload.
type UploadResumableInitResponse struct {
	// Upload ID generated for resumable upload of a file.
	UploadId             string   `protobuf:"bytes,1,opt,name=uploadId,proto3" json:"uploadId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadResumableInitResponse) Reset()         { *m = UploadResumableInitResponse{} }
func (m *UploadResumableInitResponse) String() string { return proto.CompactTextString(m) }
func (*UploadResumableInitResponse) ProtoMessage()    {}
func (*UploadResumableInitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_8d455835afb607d8, []int{5}
}
func (m *UploadResumableInitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadResumableInitResponse.Unmarshal(m, b)
}
func (m *UploadResumableInitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadResumableInitResponse.Marshal(b, m, deterministic)
}
func (dst *UploadResumableInitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadResumableInitResponse.Merge(dst, src)
}
func (m *UploadResumableInitResponse) XXX_Size() int {
	return xxx_messageInfo_UploadResumableInitResponse.Size(m)
}
func (m *UploadResumableInitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadResumableInitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadResumableInitResponse proto.InternalMessageInfo

func (m *UploadResumableInitResponse) GetUploadId() string {
	if m != nil {
		return m.UploadId
	}
	return ""
}

// UploadResumablePartRequest is the request for Resumable Part Upload.
type UploadResumablePartRequest struct {
	// File part chunk.
	Part                 []byte   `protobuf:"bytes,1,opt,name=part,proto3" json:"part,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadResumablePartRequest) Reset()         { *m = UploadResumablePartRequest{} }
func (m *UploadResumablePartRequest) String() string { return proto.CompactTextString(m) }
func (*UploadResumablePartRequest) ProtoMessage()    {}
func (*UploadResumablePartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_8d455835afb607d8, []int{6}
}
func (m *UploadResumablePartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadResumablePartRequest.Unmarshal(m, b)
}
func (m *UploadResumablePartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadResumablePartRequest.Marshal(b, m, deterministic)
}
func (dst *UploadResumablePartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadResumablePartRequest.Merge(dst, src)
}
func (m *UploadResumablePartRequest) XXX_Size() int {
	return xxx_messageInfo_UploadResumablePartRequest.Size(m)
}
func (m *UploadResumablePartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadResumablePartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadResumablePartRequest proto.InternalMessageInfo

func (m *UploadResumablePartRequest) GetPart() []byte {
	if m != nil {
		return m.Part
	}
	return nil
}

// UploadResumablePartResponse is the response for Resumable Part Upload.
type UploadResumablePartResponse struct {
	Etag                 string   `protobuf:"bytes,1,opt,name=etag,proto3" json:"etag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadResumablePartResponse) Reset()         { *m = UploadResumablePartResponse{} }
func (m *UploadResumablePartResponse) String() string { return proto.CompactTextString(m) }
func (*UploadResumablePartResponse) ProtoMessage()    {}
func (*UploadResumablePartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_8d455835afb607d8, []int{7}
}
func (m *UploadResumablePartResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadResumablePartResponse.Unmarshal(m, b)
}
func (m *UploadResumablePartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadResumablePartResponse.Marshal(b, m, deterministic)
}
func (dst *UploadResumablePartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadResumablePartResponse.Merge(dst, src)
}
func (m *UploadResumablePartResponse) XXX_Size() int {
	return xxx_messageInfo_UploadResumablePartResponse.Size(m)
}
func (m *UploadResumablePartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadResumablePartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadResumablePartResponse proto.InternalMessageInfo

func (m *UploadResumablePartResponse) GetEtag() string {
	if m != nil {
		return m.Etag
	}
	return ""
}

func init() {
	proto.RegisterType((*UploadMediaRequest)(nil), "upload.UploadMediaRequest")
	proto.RegisterType((*UploadMediaResponse)(nil), "upload.UploadMediaResponse")
	proto.RegisterType((*UploadMultipartRequest)(nil), "upload.UploadMultipartRequest")
	proto.RegisterMapType((map[string]string)(nil), "upload.UploadMultipartRequest.MetadataEntry")
	proto.RegisterType((*UploadMultipartResponse)(nil), "upload.UploadMultipartResponse")
	proto.RegisterType((*UploadResumableInitRequest)(nil), "upload.UploadResumableInitRequest")
	proto.RegisterMapType((map[string]string)(nil), "upload.UploadResumableInitRequest.MetadataEntry")
	proto.RegisterType((*UploadResumableInitResponse)(nil), "upload.UploadResumableInitResponse")
	proto.RegisterType((*UploadResumablePartRequest)(nil), "upload.UploadResumablePartRequest")
	proto.RegisterType((*UploadResumablePartResponse)(nil), "upload.UploadResumablePartResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UploadClient is the client API for Upload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UploadClient interface {
	// The function Uploads the given file.
	//
	// Returns the Location of the file as output.
	//
	// In case of an error the error is returned.
	UploadMedia(ctx context.Context, in *UploadMediaRequest, opts ...grpc.CallOption) (*UploadMediaResponse, error)
	UploadMultipart(ctx context.Context, in *UploadMultipartRequest, opts ...grpc.CallOption) (*UploadMultipartResponse, error)
	UploadResumableInit(ctx context.Context, in *UploadResumableInitRequest, opts ...grpc.CallOption) (*UploadResumableInitResponse, error)
	UploadResumablePart(ctx context.Context, in *UploadResumablePartRequest, opts ...grpc.CallOption) (*UploadResumablePartResponse, error)
}

type uploadClient struct {
	cc *grpc.ClientConn
}

func NewUploadClient(cc *grpc.ClientConn) UploadClient {
	return &uploadClient{cc}
}

func (c *uploadClient) UploadMedia(ctx context.Context, in *UploadMediaRequest, opts ...grpc.CallOption) (*UploadMediaResponse, error) {
	out := new(UploadMediaResponse)
	err := c.cc.Invoke(ctx, "/upload.Upload/UploadMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadClient) UploadMultipart(ctx context.Context, in *UploadMultipartRequest, opts ...grpc.CallOption) (*UploadMultipartResponse, error) {
	out := new(UploadMultipartResponse)
	err := c.cc.Invoke(ctx, "/upload.Upload/UploadMultipart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadClient) UploadResumableInit(ctx context.Context, in *UploadResumableInitRequest, opts ...grpc.CallOption) (*UploadResumableInitResponse, error) {
	out := new(UploadResumableInitResponse)
	err := c.cc.Invoke(ctx, "/upload.Upload/UploadResumableInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadClient) UploadResumablePart(ctx context.Context, in *UploadResumablePartRequest, opts ...grpc.CallOption) (*UploadResumablePartResponse, error) {
	out := new(UploadResumablePartResponse)
	err := c.cc.Invoke(ctx, "/upload.Upload/UploadResumablePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadServer is the server API for Upload service.
type UploadServer interface {
	// The function Uploads the given file.
	//
	// Returns the Location of the file as output.
	//
	// In case of an error the error is returned.
	UploadMedia(context.Context, *UploadMediaRequest) (*UploadMediaResponse, error)
	UploadMultipart(context.Context, *UploadMultipartRequest) (*UploadMultipartResponse, error)
	UploadResumableInit(context.Context, *UploadResumableInitRequest) (*UploadResumableInitResponse, error)
	UploadResumablePart(context.Context, *UploadResumablePartRequest) (*UploadResumablePartResponse, error)
}

func RegisterUploadServer(s *grpc.Server, srv UploadServer) {
	s.RegisterService(&_Upload_serviceDesc, srv)
}

func _Upload_UploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServer).UploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upload.Upload/UploadMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServer).UploadMedia(ctx, req.(*UploadMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upload_UploadMultipart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMultipartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServer).UploadMultipart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upload.Upload/UploadMultipart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServer).UploadMultipart(ctx, req.(*UploadMultipartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upload_UploadResumableInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadResumableInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServer).UploadResumableInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upload.Upload/UploadResumableInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServer).UploadResumableInit(ctx, req.(*UploadResumableInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upload_UploadResumablePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadResumablePartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServer).UploadResumablePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upload.Upload/UploadResumablePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServer).UploadResumablePart(ctx, req.(*UploadResumablePartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Upload_serviceDesc = grpc.ServiceDesc{
	ServiceName: "upload.Upload",
	HandlerType: (*UploadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadMedia",
			Handler:    _Upload_UploadMedia_Handler,
		},
		{
			MethodName: "UploadMultipart",
			Handler:    _Upload_UploadMultipart_Handler,
		},
		{
			MethodName: "UploadResumableInit",
			Handler:    _Upload_UploadResumableInit_Handler,
		},
		{
			MethodName: "UploadResumablePart",
			Handler:    _Upload_UploadResumablePart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upload_service.proto",
}

func init() {
	proto.RegisterFile("upload_service.proto", fileDescriptor_upload_service_8d455835afb607d8)
}

var fileDescriptor_upload_service_8d455835afb607d8 = []byte{
	// 415 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x94, 0xcd, 0x6e, 0xa3, 0x30,
	0x10, 0xc7, 0x17, 0xc8, 0xa2, 0xec, 0x64, 0x57, 0xbb, 0xf2, 0x46, 0x69, 0x44, 0xa4, 0xb6, 0xa2,
	0x97, 0x1c, 0x5a, 0x94, 0xa6, 0x97, 0x7e, 0x9c, 0x2b, 0x35, 0x52, 0x23, 0x45, 0xa8, 0x3d, 0xb7,
	0x4e, 0x70, 0x2b, 0x14, 0x12, 0x28, 0xd8, 0x91, 0xf2, 0x98, 0x7d, 0x80, 0xbe, 0x41, 0x1f, 0xa2,
	0x06, 0x1b, 0x02, 0x09, 0x90, 0x43, 0x6f, 0x33, 0x66, 0x66, 0xfe, 0x33, 0x3f, 0x8f, 0x81, 0x36,
	0x0b, 0x3c, 0x1f, 0x3b, 0x4f, 0x11, 0x09, 0x57, 0xee, 0x8c, 0x58, 0x41, 0xe8, 0x53, 0x1f, 0xe9,
	0xe2, 0xd4, 0xb4, 0x01, 0x3d, 0x26, 0xd6, 0x98, 0x38, 0x2e, 0xb6, 0xc9, 0x1b, 0x23, 0x11, 0x45,
	0x08, 0x1a, 0x2f, 0xae, 0x47, 0xba, 0xca, 0xb1, 0xd2, 0xff, 0x6d, 0x27, 0x36, 0xfa, 0x07, 0xda,
	0x9c, 0xac, 0xbb, 0x2a, 0x3f, 0xfa, 0x65, 0xc7, 0x26, 0xea, 0x80, 0x3e, 0x65, 0xb3, 0x39, 0xa1,
	0x5d, 0x2d, 0x39, 0x94, 0x9e, 0x79, 0x06, 0xff, 0x0b, 0x35, 0xa3, 0xc0, 0x5f, 0x46, 0x24, 0x0e,
	0xf7, 0x19, 0x0d, 0x18, 0x4d, 0xca, 0xf2, 0x70, 0xe1, 0x99, 0x1f, 0x0a, 0x74, 0x64, 0x3c, 0xf3,
	0xa8, 0x1b, 0xe0, 0x90, 0xd6, 0xf5, 0x71, 0x07, 0xcd, 0x05, 0xa1, 0xd8, 0xc1, 0x14, 0xf3, 0x66,
	0xb4, 0x7e, 0x6b, 0x78, 0x6a, 0x89, 0x61, 0xac, 0xf2, 0x2a, 0xd6, 0x58, 0x86, 0xdf, 0x2e, 0x69,
	0xb8, 0xb6, 0xb3, 0xec, 0x74, 0x22, 0xad, 0x6c, 0xa2, 0x46, 0x7e, 0x22, 0xe3, 0x06, 0xfe, 0x14,
	0x8a, 0xa4, 0xa9, 0xca, 0x26, 0xb5, 0x0d, 0x3f, 0x57, 0xd8, 0x63, 0x44, 0x02, 0x12, 0xce, 0xb5,
	0x7a, 0xa9, 0x98, 0xe7, 0x70, 0xb0, 0xd3, 0xd8, 0x1e, 0x24, 0xef, 0x0a, 0x18, 0x22, 0x87, 0x87,
	0xb2, 0x05, 0x9e, 0x7a, 0x64, 0xb4, 0x74, 0x33, 0x2c, 0xbb, 0xea, 0x9b, 0xc6, 0xd5, 0x7c, 0xe3,
	0xe8, 0x3e, 0x07, 0x4b, 0x4b, 0x60, 0x0d, 0x8a, 0xb0, 0xca, 0xea, 0x57, 0x01, 0xfb, 0x1e, 0x86,
	0x2b, 0xe8, 0x95, 0x4a, 0x4a, 0x14, 0x06, 0x34, 0x45, 0x63, 0x23, 0x47, 0xd6, 0xcb, 0x7c, 0x73,
	0xb0, 0x43, 0x63, 0x52, 0x5c, 0x92, 0x18, 0x6a, 0xba, 0x24, 0xb1, 0xcd, 0x99, 0xf7, 0x4a, 0x33,
	0xa4, 0x18, 0x4f, 0xe1, 0x73, 0xbc, 0x4a, 0xa1, 0xc4, 0x1e, 0x7e, 0xaa, 0xa0, 0x8b, 0x1c, 0xbe,
	0x62, 0xad, 0xdc, 0x02, 0x23, 0x63, 0x6b, 0xbf, 0x72, 0x2f, 0xc5, 0xe8, 0x95, 0x7e, 0x13, 0x32,
	0xe6, 0x0f, 0xf4, 0x00, 0x7f, 0xb7, 0xee, 0x1e, 0x1d, 0xd6, 0x6f, 0xab, 0x71, 0x54, 0xf9, 0x3d,
	0xab, 0xfa, 0x9c, 0x3e, 0xb0, 0x02, 0x4a, 0x64, 0xee, 0xbf, 0x5a, 0xe3, 0xa4, 0x36, 0xa6, 0x46,
	0x21, 0xe6, 0x57, 0xa9, 0x90, 0xbb, 0x8e, 0x4a, 0x85, 0x49, 0x61, 0x86, 0xa9, 0x9e, 0xfc, 0x87,
	0x2e, 0xbe, 0x02, 0x00, 0x00, 0xff, 0xff, 0x99, 0x0f, 0xf4, 0x38, 0x9f, 0x04, 0x00, 0x00,
}
