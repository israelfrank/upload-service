// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upload_service.proto

package upload

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// UploadMediaRequest is the request for media upload
type UploadMediaRequest struct {
	// File is the file to upload
	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// File key to store in S3
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The bucket to upload the file to
	Bucket               string   `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadMediaRequest) Reset()         { *m = UploadMediaRequest{} }
func (m *UploadMediaRequest) String() string { return proto.CompactTextString(m) }
func (*UploadMediaRequest) ProtoMessage()    {}
func (*UploadMediaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_63bf0de312e6b989, []int{0}
}
func (m *UploadMediaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadMediaRequest.Unmarshal(m, b)
}
func (m *UploadMediaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadMediaRequest.Marshal(b, m, deterministic)
}
func (dst *UploadMediaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadMediaRequest.Merge(dst, src)
}
func (m *UploadMediaRequest) XXX_Size() int {
	return xxx_messageInfo_UploadMediaRequest.Size(m)
}
func (m *UploadMediaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadMediaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadMediaRequest proto.InternalMessageInfo

func (m *UploadMediaRequest) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *UploadMediaRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UploadMediaRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

// UploadMediaResponse is the response for media upload
type UploadMediaResponse struct {
	// The location that the file was uploaded to
	Location             string   `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadMediaResponse) Reset()         { *m = UploadMediaResponse{} }
func (m *UploadMediaResponse) String() string { return proto.CompactTextString(m) }
func (*UploadMediaResponse) ProtoMessage()    {}
func (*UploadMediaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_63bf0de312e6b989, []int{1}
}
func (m *UploadMediaResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadMediaResponse.Unmarshal(m, b)
}
func (m *UploadMediaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadMediaResponse.Marshal(b, m, deterministic)
}
func (dst *UploadMediaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadMediaResponse.Merge(dst, src)
}
func (m *UploadMediaResponse) XXX_Size() int {
	return xxx_messageInfo_UploadMediaResponse.Size(m)
}
func (m *UploadMediaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadMediaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadMediaResponse proto.InternalMessageInfo

func (m *UploadMediaResponse) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

// UploadMultipartRequest is the request for multipart upload
type UploadMultipartRequest struct {
	// File to upload
	File []byte `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	// File metadata
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// File key to store in S3
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// The bucket to upload the file to
	Bucket               string   `protobuf:"bytes,4,opt,name=bucket,proto3" json:"bucket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadMultipartRequest) Reset()         { *m = UploadMultipartRequest{} }
func (m *UploadMultipartRequest) String() string { return proto.CompactTextString(m) }
func (*UploadMultipartRequest) ProtoMessage()    {}
func (*UploadMultipartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_63bf0de312e6b989, []int{2}
}
func (m *UploadMultipartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadMultipartRequest.Unmarshal(m, b)
}
func (m *UploadMultipartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadMultipartRequest.Marshal(b, m, deterministic)
}
func (dst *UploadMultipartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadMultipartRequest.Merge(dst, src)
}
func (m *UploadMultipartRequest) XXX_Size() int {
	return xxx_messageInfo_UploadMultipartRequest.Size(m)
}
func (m *UploadMultipartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadMultipartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadMultipartRequest proto.InternalMessageInfo

func (m *UploadMultipartRequest) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *UploadMultipartRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *UploadMultipartRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UploadMultipartRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

// UploadMultipartResponse is the response for multipart upload
type UploadMultipartResponse struct {
	// The location that the file was uploaded to
	Location             string   `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadMultipartResponse) Reset()         { *m = UploadMultipartResponse{} }
func (m *UploadMultipartResponse) String() string { return proto.CompactTextString(m) }
func (*UploadMultipartResponse) ProtoMessage()    {}
func (*UploadMultipartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_63bf0de312e6b989, []int{3}
}
func (m *UploadMultipartResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadMultipartResponse.Unmarshal(m, b)
}
func (m *UploadMultipartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadMultipartResponse.Marshal(b, m, deterministic)
}
func (dst *UploadMultipartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadMultipartResponse.Merge(dst, src)
}
func (m *UploadMultipartResponse) XXX_Size() int {
	return xxx_messageInfo_UploadMultipartResponse.Size(m)
}
func (m *UploadMultipartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadMultipartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadMultipartResponse proto.InternalMessageInfo

func (m *UploadMultipartResponse) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

// UploadInitRequest is the data for initiating resumable upload
type UploadInitRequest struct {
	// File key to store in S3
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The bucket to upload the file to
	Bucket string `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	// File metadata
	Metadata             map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *UploadInitRequest) Reset()         { *m = UploadInitRequest{} }
func (m *UploadInitRequest) String() string { return proto.CompactTextString(m) }
func (*UploadInitRequest) ProtoMessage()    {}
func (*UploadInitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_63bf0de312e6b989, []int{4}
}
func (m *UploadInitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadInitRequest.Unmarshal(m, b)
}
func (m *UploadInitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadInitRequest.Marshal(b, m, deterministic)
}
func (dst *UploadInitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadInitRequest.Merge(dst, src)
}
func (m *UploadInitRequest) XXX_Size() int {
	return xxx_messageInfo_UploadInitRequest.Size(m)
}
func (m *UploadInitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadInitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadInitRequest proto.InternalMessageInfo

func (m *UploadInitRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UploadInitRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

func (m *UploadInitRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

// UploadInitResponse is the response for initiating resumable upload
type UploadInitResponse struct {
	// Upload ID generated for resumable upload of a file
	UploadId string `protobuf:"bytes,1,opt,name=uploadId,proto3" json:"uploadId,omitempty"`
	// File key to store in S3
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The bucket to upload the file to
	Bucket               string   `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadInitResponse) Reset()         { *m = UploadInitResponse{} }
func (m *UploadInitResponse) String() string { return proto.CompactTextString(m) }
func (*UploadInitResponse) ProtoMessage()    {}
func (*UploadInitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_63bf0de312e6b989, []int{5}
}
func (m *UploadInitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadInitResponse.Unmarshal(m, b)
}
func (m *UploadInitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadInitResponse.Marshal(b, m, deterministic)
}
func (dst *UploadInitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadInitResponse.Merge(dst, src)
}
func (m *UploadInitResponse) XXX_Size() int {
	return xxx_messageInfo_UploadInitResponse.Size(m)
}
func (m *UploadInitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadInitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadInitResponse proto.InternalMessageInfo

func (m *UploadInitResponse) GetUploadId() string {
	if m != nil {
		return m.UploadId
	}
	return ""
}

func (m *UploadInitResponse) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UploadInitResponse) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

// UploadPartRequest is the request for resumable part uload
type UploadPartRequest struct {
	// File part chunk
	Part []byte `protobuf:"bytes,1,opt,name=part,proto3" json:"part,omitempty"`
	// Part number
	PartNumber int64 `protobuf:"varint,2,opt,name=partNumber,proto3" json:"partNumber,omitempty"`
	// Upload ID generated for resumable upload of a file
	UploadId string `protobuf:"bytes,3,opt,name=uploadId,proto3" json:"uploadId,omitempty"`
	// File key to store in S3
	Key string `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	// The bucket to upload the file to
	Bucket               string   `protobuf:"bytes,5,opt,name=bucket,proto3" json:"bucket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadPartRequest) Reset()         { *m = UploadPartRequest{} }
func (m *UploadPartRequest) String() string { return proto.CompactTextString(m) }
func (*UploadPartRequest) ProtoMessage()    {}
func (*UploadPartRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_63bf0de312e6b989, []int{6}
}
func (m *UploadPartRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadPartRequest.Unmarshal(m, b)
}
func (m *UploadPartRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadPartRequest.Marshal(b, m, deterministic)
}
func (dst *UploadPartRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadPartRequest.Merge(dst, src)
}
func (m *UploadPartRequest) XXX_Size() int {
	return xxx_messageInfo_UploadPartRequest.Size(m)
}
func (m *UploadPartRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadPartRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadPartRequest proto.InternalMessageInfo

func (m *UploadPartRequest) GetPart() []byte {
	if m != nil {
		return m.Part
	}
	return nil
}

func (m *UploadPartRequest) GetPartNumber() int64 {
	if m != nil {
		return m.PartNumber
	}
	return 0
}

func (m *UploadPartRequest) GetUploadId() string {
	if m != nil {
		return m.UploadId
	}
	return ""
}

func (m *UploadPartRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UploadPartRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

// UploadPartResponse is the response for resumable part upload
type UploadPartResponse struct {
	// Upload status code
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// Upload status message
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadPartResponse) Reset()         { *m = UploadPartResponse{} }
func (m *UploadPartResponse) String() string { return proto.CompactTextString(m) }
func (*UploadPartResponse) ProtoMessage()    {}
func (*UploadPartResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_63bf0de312e6b989, []int{7}
}
func (m *UploadPartResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadPartResponse.Unmarshal(m, b)
}
func (m *UploadPartResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadPartResponse.Marshal(b, m, deterministic)
}
func (dst *UploadPartResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadPartResponse.Merge(dst, src)
}
func (m *UploadPartResponse) XXX_Size() int {
	return xxx_messageInfo_UploadPartResponse.Size(m)
}
func (m *UploadPartResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadPartResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadPartResponse proto.InternalMessageInfo

func (m *UploadPartResponse) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *UploadPartResponse) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

// UploadCompleteRequest is the request for completing resumable upload
type UploadCompleteRequest struct {
	// / Upload ID generated for resumable upload of a file
	UploadId string `protobuf:"bytes,1,opt,name=uploadId,proto3" json:"uploadId,omitempty"`
	// File key to store in S3
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The bucket to upload the file to
	Bucket               string   `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadCompleteRequest) Reset()         { *m = UploadCompleteRequest{} }
func (m *UploadCompleteRequest) String() string { return proto.CompactTextString(m) }
func (*UploadCompleteRequest) ProtoMessage()    {}
func (*UploadCompleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_63bf0de312e6b989, []int{8}
}
func (m *UploadCompleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadCompleteRequest.Unmarshal(m, b)
}
func (m *UploadCompleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadCompleteRequest.Marshal(b, m, deterministic)
}
func (dst *UploadCompleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadCompleteRequest.Merge(dst, src)
}
func (m *UploadCompleteRequest) XXX_Size() int {
	return xxx_messageInfo_UploadCompleteRequest.Size(m)
}
func (m *UploadCompleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadCompleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadCompleteRequest proto.InternalMessageInfo

func (m *UploadCompleteRequest) GetUploadId() string {
	if m != nil {
		return m.UploadId
	}
	return ""
}

func (m *UploadCompleteRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UploadCompleteRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

// UploadCompleteResponse is the response for completing resumable upload
type UploadCompleteResponse struct {
	// The location that the file was uploaded to
	Location             string   `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadCompleteResponse) Reset()         { *m = UploadCompleteResponse{} }
func (m *UploadCompleteResponse) String() string { return proto.CompactTextString(m) }
func (*UploadCompleteResponse) ProtoMessage()    {}
func (*UploadCompleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_63bf0de312e6b989, []int{9}
}
func (m *UploadCompleteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadCompleteResponse.Unmarshal(m, b)
}
func (m *UploadCompleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadCompleteResponse.Marshal(b, m, deterministic)
}
func (dst *UploadCompleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadCompleteResponse.Merge(dst, src)
}
func (m *UploadCompleteResponse) XXX_Size() int {
	return xxx_messageInfo_UploadCompleteResponse.Size(m)
}
func (m *UploadCompleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadCompleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadCompleteResponse proto.InternalMessageInfo

func (m *UploadCompleteResponse) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

// UploadAbortRequest is the request for aborting resumable upload
type UploadAbortRequest struct {
	// Upload ID generated for resumable upload of a file
	UploadId string `protobuf:"bytes,1,opt,name=uploadId,proto3" json:"uploadId,omitempty"`
	// File key to store in S3
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// The bucket to upload the file to
	Bucket               string   `protobuf:"bytes,3,opt,name=bucket,proto3" json:"bucket,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadAbortRequest) Reset()         { *m = UploadAbortRequest{} }
func (m *UploadAbortRequest) String() string { return proto.CompactTextString(m) }
func (*UploadAbortRequest) ProtoMessage()    {}
func (*UploadAbortRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_63bf0de312e6b989, []int{10}
}
func (m *UploadAbortRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadAbortRequest.Unmarshal(m, b)
}
func (m *UploadAbortRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadAbortRequest.Marshal(b, m, deterministic)
}
func (dst *UploadAbortRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadAbortRequest.Merge(dst, src)
}
func (m *UploadAbortRequest) XXX_Size() int {
	return xxx_messageInfo_UploadAbortRequest.Size(m)
}
func (m *UploadAbortRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadAbortRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadAbortRequest proto.InternalMessageInfo

func (m *UploadAbortRequest) GetUploadId() string {
	if m != nil {
		return m.UploadId
	}
	return ""
}

func (m *UploadAbortRequest) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *UploadAbortRequest) GetBucket() string {
	if m != nil {
		return m.Bucket
	}
	return ""
}

// UploadAbortResponse is the response for aborting resumable upload
type UploadAbortResponse struct {
	Status               bool     `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadAbortResponse) Reset()         { *m = UploadAbortResponse{} }
func (m *UploadAbortResponse) String() string { return proto.CompactTextString(m) }
func (*UploadAbortResponse) ProtoMessage()    {}
func (*UploadAbortResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_upload_service_63bf0de312e6b989, []int{11}
}
func (m *UploadAbortResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadAbortResponse.Unmarshal(m, b)
}
func (m *UploadAbortResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadAbortResponse.Marshal(b, m, deterministic)
}
func (dst *UploadAbortResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadAbortResponse.Merge(dst, src)
}
func (m *UploadAbortResponse) XXX_Size() int {
	return xxx_messageInfo_UploadAbortResponse.Size(m)
}
func (m *UploadAbortResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadAbortResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadAbortResponse proto.InternalMessageInfo

func (m *UploadAbortResponse) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*UploadMediaRequest)(nil), "upload.UploadMediaRequest")
	proto.RegisterType((*UploadMediaResponse)(nil), "upload.UploadMediaResponse")
	proto.RegisterType((*UploadMultipartRequest)(nil), "upload.UploadMultipartRequest")
	proto.RegisterMapType((map[string]string)(nil), "upload.UploadMultipartRequest.MetadataEntry")
	proto.RegisterType((*UploadMultipartResponse)(nil), "upload.UploadMultipartResponse")
	proto.RegisterType((*UploadInitRequest)(nil), "upload.UploadInitRequest")
	proto.RegisterMapType((map[string]string)(nil), "upload.UploadInitRequest.MetadataEntry")
	proto.RegisterType((*UploadInitResponse)(nil), "upload.UploadInitResponse")
	proto.RegisterType((*UploadPartRequest)(nil), "upload.UploadPartRequest")
	proto.RegisterType((*UploadPartResponse)(nil), "upload.UploadPartResponse")
	proto.RegisterType((*UploadCompleteRequest)(nil), "upload.UploadCompleteRequest")
	proto.RegisterType((*UploadCompleteResponse)(nil), "upload.UploadCompleteResponse")
	proto.RegisterType((*UploadAbortRequest)(nil), "upload.UploadAbortRequest")
	proto.RegisterType((*UploadAbortResponse)(nil), "upload.UploadAbortResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UploadClient is the client API for Upload service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UploadClient interface {
	// The function Uploads the given file
	//
	// Returns the Location of the file as output
	//
	// In case of an error the error is returned
	UploadMedia(ctx context.Context, in *UploadMediaRequest, opts ...grpc.CallOption) (*UploadMediaResponse, error)
	UploadMultipart(ctx context.Context, in *UploadMultipartRequest, opts ...grpc.CallOption) (*UploadMultipartResponse, error)
	UploadInit(ctx context.Context, in *UploadInitRequest, opts ...grpc.CallOption) (*UploadInitResponse, error)
	UploadPart(ctx context.Context, opts ...grpc.CallOption) (Upload_UploadPartClient, error)
	UploadComplete(ctx context.Context, in *UploadCompleteRequest, opts ...grpc.CallOption) (*UploadCompleteResponse, error)
	UploadAbort(ctx context.Context, in *UploadAbortRequest, opts ...grpc.CallOption) (*UploadAbortResponse, error)
}

type uploadClient struct {
	cc *grpc.ClientConn
}

func NewUploadClient(cc *grpc.ClientConn) UploadClient {
	return &uploadClient{cc}
}

func (c *uploadClient) UploadMedia(ctx context.Context, in *UploadMediaRequest, opts ...grpc.CallOption) (*UploadMediaResponse, error) {
	out := new(UploadMediaResponse)
	err := c.cc.Invoke(ctx, "/upload.Upload/UploadMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadClient) UploadMultipart(ctx context.Context, in *UploadMultipartRequest, opts ...grpc.CallOption) (*UploadMultipartResponse, error) {
	out := new(UploadMultipartResponse)
	err := c.cc.Invoke(ctx, "/upload.Upload/UploadMultipart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadClient) UploadInit(ctx context.Context, in *UploadInitRequest, opts ...grpc.CallOption) (*UploadInitResponse, error) {
	out := new(UploadInitResponse)
	err := c.cc.Invoke(ctx, "/upload.Upload/UploadInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadClient) UploadPart(ctx context.Context, opts ...grpc.CallOption) (Upload_UploadPartClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Upload_serviceDesc.Streams[0], "/upload.Upload/UploadPart", opts...)
	if err != nil {
		return nil, err
	}
	x := &uploadUploadPartClient{stream}
	return x, nil
}

type Upload_UploadPartClient interface {
	Send(*UploadPartRequest) error
	Recv() (*UploadPartResponse, error)
	grpc.ClientStream
}

type uploadUploadPartClient struct {
	grpc.ClientStream
}

func (x *uploadUploadPartClient) Send(m *UploadPartRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploadUploadPartClient) Recv() (*UploadPartResponse, error) {
	m := new(UploadPartResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uploadClient) UploadComplete(ctx context.Context, in *UploadCompleteRequest, opts ...grpc.CallOption) (*UploadCompleteResponse, error) {
	out := new(UploadCompleteResponse)
	err := c.cc.Invoke(ctx, "/upload.Upload/UploadComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uploadClient) UploadAbort(ctx context.Context, in *UploadAbortRequest, opts ...grpc.CallOption) (*UploadAbortResponse, error) {
	out := new(UploadAbortResponse)
	err := c.cc.Invoke(ctx, "/upload.Upload/UploadAbort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UploadServer is the server API for Upload service.
type UploadServer interface {
	// The function Uploads the given file
	//
	// Returns the Location of the file as output
	//
	// In case of an error the error is returned
	UploadMedia(context.Context, *UploadMediaRequest) (*UploadMediaResponse, error)
	UploadMultipart(context.Context, *UploadMultipartRequest) (*UploadMultipartResponse, error)
	UploadInit(context.Context, *UploadInitRequest) (*UploadInitResponse, error)
	UploadPart(Upload_UploadPartServer) error
	UploadComplete(context.Context, *UploadCompleteRequest) (*UploadCompleteResponse, error)
	UploadAbort(context.Context, *UploadAbortRequest) (*UploadAbortResponse, error)
}

func RegisterUploadServer(s *grpc.Server, srv UploadServer) {
	s.RegisterService(&_Upload_serviceDesc, srv)
}

func _Upload_UploadMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMediaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServer).UploadMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upload.Upload/UploadMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServer).UploadMedia(ctx, req.(*UploadMediaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upload_UploadMultipart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadMultipartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServer).UploadMultipart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upload.Upload/UploadMultipart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServer).UploadMultipart(ctx, req.(*UploadMultipartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upload_UploadInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadInitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServer).UploadInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upload.Upload/UploadInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServer).UploadInit(ctx, req.(*UploadInitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upload_UploadPart_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadServer).UploadPart(&uploadUploadPartServer{stream})
}

type Upload_UploadPartServer interface {
	Send(*UploadPartResponse) error
	Recv() (*UploadPartRequest, error)
	grpc.ServerStream
}

type uploadUploadPartServer struct {
	grpc.ServerStream
}

func (x *uploadUploadPartServer) Send(m *UploadPartResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploadUploadPartServer) Recv() (*UploadPartRequest, error) {
	m := new(UploadPartRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Upload_UploadComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCompleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServer).UploadComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upload.Upload/UploadComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServer).UploadComplete(ctx, req.(*UploadCompleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upload_UploadAbort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAbortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UploadServer).UploadAbort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upload.Upload/UploadAbort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UploadServer).UploadAbort(ctx, req.(*UploadAbortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Upload_serviceDesc = grpc.ServiceDesc{
	ServiceName: "upload.Upload",
	HandlerType: (*UploadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadMedia",
			Handler:    _Upload_UploadMedia_Handler,
		},
		{
			MethodName: "UploadMultipart",
			Handler:    _Upload_UploadMultipart_Handler,
		},
		{
			MethodName: "UploadInit",
			Handler:    _Upload_UploadInit_Handler,
		},
		{
			MethodName: "UploadComplete",
			Handler:    _Upload_UploadComplete_Handler,
		},
		{
			MethodName: "UploadAbort",
			Handler:    _Upload_UploadAbort_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadPart",
			Handler:       _Upload_UploadPart_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "upload_service.proto",
}

func init() {
	proto.RegisterFile("upload_service.proto", fileDescriptor_upload_service_63bf0de312e6b989)
}

var fileDescriptor_upload_service_63bf0de312e6b989 = []byte{
	// 544 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x55, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0x5e, 0x9a, 0xb6, 0x74, 0x67, 0xfc, 0x9a, 0x31, 0x4a, 0x10, 0x05, 0xe5, 0x86, 0x5e, 0x40,
	0x05, 0x03, 0x24, 0x04, 0x57, 0x30, 0x4d, 0xa2, 0x17, 0x43, 0xc5, 0x82, 0x1b, 0x24, 0x84, 0xdc,
	0xc6, 0xa0, 0x68, 0x69, 0x1d, 0x62, 0x67, 0xd2, 0x1e, 0x82, 0x67, 0xe2, 0x31, 0xb8, 0xe2, 0x5d,
	0x48, 0xec, 0xd8, 0xb1, 0xb3, 0x74, 0x1a, 0xa2, 0x57, 0xf5, 0xb1, 0x73, 0x3e, 0x7f, 0xe7, 0x3b,
	0x9f, 0x4f, 0x61, 0x37, 0x4f, 0x13, 0x46, 0xa2, 0xaf, 0x9c, 0x66, 0x27, 0xf1, 0x82, 0x4e, 0xd2,
	0x8c, 0x09, 0x86, 0xfa, 0x6a, 0x37, 0xc4, 0x80, 0x3e, 0xc9, 0xd5, 0x11, 0x8d, 0x62, 0x82, 0xe9,
	0x8f, 0x9c, 0x72, 0x81, 0x10, 0x74, 0xbf, 0xc5, 0x09, 0x1d, 0x7a, 0x0f, 0xbc, 0xf1, 0x65, 0x2c,
	0xd7, 0xe8, 0x3a, 0xf8, 0xc7, 0xf4, 0x74, 0xd8, 0x29, 0xb6, 0xb6, 0x71, 0xb9, 0x44, 0x7b, 0xd0,
	0x9f, 0xe7, 0x8b, 0x63, 0x2a, 0x86, 0xbe, 0xdc, 0xac, 0xa2, 0xf0, 0x29, 0xdc, 0x74, 0x30, 0x79,
	0xca, 0x56, 0x9c, 0xa2, 0x00, 0x06, 0x09, 0x5b, 0x10, 0x11, 0xb3, 0x95, 0x04, 0xde, 0xc6, 0x26,
	0x0e, 0xff, 0x78, 0xb0, 0x57, 0xe5, 0xe4, 0x89, 0x88, 0x53, 0x92, 0x89, 0xf3, 0xb8, 0xbc, 0x83,
	0xc1, 0x92, 0x0a, 0x12, 0x11, 0x41, 0x0a, 0x42, 0xfe, 0x78, 0x67, 0xff, 0xd1, 0x44, 0x15, 0x34,
	0x69, 0x47, 0x99, 0x1c, 0x55, 0x9f, 0x1f, 0xae, 0x44, 0x76, 0x8a, 0x4d, 0xb6, 0xae, 0xca, 0x6f,
	0xab, 0xaa, 0x6b, 0x57, 0x15, 0xbc, 0x86, 0x2b, 0x0e, 0x88, 0x4e, 0xf5, 0xea, 0xd4, 0x5d, 0xe8,
	0x9d, 0x90, 0x24, 0xa7, 0x95, 0x48, 0x2a, 0x78, 0xd5, 0x79, 0xe9, 0x85, 0x2f, 0xe0, 0xf6, 0x19,
	0x62, 0x17, 0x90, 0xe5, 0x97, 0x07, 0x37, 0x54, 0xde, 0x74, 0x15, 0x1b, 0x45, 0xce, 0x5e, 0x5c,
	0x73, 0xee, 0xd8, 0x9c, 0xd1, 0x81, 0xa5, 0x93, 0x2f, 0x75, 0x7a, 0xe8, 0xea, 0x64, 0xc1, 0xae,
	0x93, 0xe8, 0xff, 0x0a, 0xff, 0xac, 0xfd, 0xa5, 0x6e, 0xaa, 0x6b, 0x56, 0x34, 0xa6, 0x91, 0xae,
	0x59, 0xc7, 0xff, 0xe0, 0xb3, 0x9f, 0x46, 0x9d, 0x99, 0xeb, 0x97, 0x52, 0x5f, 0xed, 0x97, 0x72,
	0x8d, 0x46, 0x00, 0xe5, 0xef, 0xfb, 0x7c, 0x39, 0xa7, 0x99, 0x84, 0xf6, 0xb1, 0xb5, 0xe3, 0xf0,
	0xf1, 0xdb, 0xf9, 0x74, 0xdb, 0xf8, 0xf4, 0x1c, 0x3e, 0x6f, 0x75, 0xad, 0x33, 0xbb, 0xbf, 0x05,
	0x9f, 0x05, 0x8b, 0x94, 0x7f, 0x7b, 0x58, 0xae, 0xd1, 0x10, 0x2e, 0x2d, 0x29, 0xe7, 0xe4, 0xbb,
	0x56, 0x4c, 0x87, 0xe1, 0x17, 0xb8, 0xa5, 0x30, 0x0e, 0xd8, 0x32, 0x4d, 0xa8, 0xa0, 0xba, 0xac,
	0xcd, 0x48, 0xf6, 0x5c, 0x3f, 0xb3, 0x1a, 0xfe, 0x02, 0x36, 0x34, 0x4d, 0x7c, 0x33, 0x67, 0xb5,
	0xd0, 0x9b, 0x61, 0xf4, 0x58, 0x0f, 0x8b, 0x0a, 0xbb, 0xa2, 0x53, 0x7c, 0xce, 0x05, 0x11, 0x39,
	0x97, 0xd0, 0x03, 0x5c, 0x45, 0xfb, 0xbf, 0x7d, 0xe8, 0xab, 0xef, 0x8b, 0x21, 0xb0, 0x63, 0x8d,
	0x19, 0x14, 0x34, 0x26, 0x80, 0x35, 0xcf, 0x82, 0xbb, 0xad, 0x67, 0xea, 0xaa, 0x70, 0x0b, 0x7d,
	0x84, 0x6b, 0x8d, 0xd7, 0x89, 0x46, 0xe7, 0xcf, 0x93, 0xe0, 0xfe, 0xda, 0x73, 0x83, 0x7a, 0x08,
	0x50, 0x5b, 0x1f, 0xdd, 0x59, 0xfb, 0xf0, 0x82, 0xa0, 0xed, 0xc8, 0xc0, 0x4c, 0x35, 0x4c, 0xe9,
	0xaa, 0x26, 0x8c, 0x65, 0xfc, 0x26, 0xcc, 0xcc, 0x61, 0x33, 0xf6, 0x9e, 0x78, 0xe8, 0x03, 0x5c,
	0x75, 0xbb, 0x8f, 0xee, 0xb9, 0x39, 0x0d, 0xd3, 0x05, 0xa3, 0x75, 0xc7, 0x86, 0x9d, 0x69, 0x82,
	0x6c, 0x5f, 0xb3, 0x09, 0xb6, 0x5f, 0x9a, 0x4d, 0x70, 0xfa, 0x1d, 0x6e, 0xcd, 0xfb, 0xf2, 0x8f,
	0xe9, 0xd9, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x47, 0xfa, 0x38, 0xa6, 0xb0, 0x06, 0x00, 0x00,
}
